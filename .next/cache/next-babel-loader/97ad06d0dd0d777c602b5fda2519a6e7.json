{"ast":null,"code":"var _jsxFileName = \"/Users/luke/Documents/fakewebsite/src/components/Avatar.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nfunction Avatar(props) {\n  const {\n    image,\n    size,\n    alt\n  } = props,\n        otherProps = _objectWithoutProperties(props, [\"image\", \"size\", \"alt\"]);\n\n  return __jsx(\"figure\", {\n    className: \"image\" + (size ? ` is-${size}x${size}` : \"\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, __jsx(\"img\", _extends({\n    className: \"is-rounded\",\n    src: image,\n    alt: alt\n  }, otherProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }\n  })));\n}\n\nexport default Avatar;","map":{"version":3,"sources":["/Users/luke/Documents/fakewebsite/src/components/Avatar.js"],"names":["React","Avatar","props","image","size","alt","otherProps"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeC,IAAAA;AAAf,MAAsCH,KAA5C;AAAA,QAA6BI,UAA7B,4BAA4CJ,KAA5C;;AAEA,SACE;AAAQ,IAAA,SAAS,EAAE,WAAWE,IAAI,GAAI,OAAMA,IAAK,IAAGA,IAAK,EAAvB,GAA2B,EAA1C,CAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAA4B,IAAA,GAAG,EAAED,KAAjC;AAAwC,IAAA,GAAG,EAAEE;AAA7C,KAAsDC,UAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADF;AAKD;;AAED,eAAeL,MAAf","sourcesContent":["import React from \"react\";\n\nfunction Avatar(props) {\n  const { image, size, alt, ...otherProps } = props;\n\n  return (\n    <figure className={\"image\" + (size ? ` is-${size}x${size}` : \"\")}>\n      <img className=\"is-rounded\" src={image} alt={alt} {...otherProps}></img>\n    </figure>\n  );\n}\n\nexport default Avatar;\n"]},"metadata":{},"sourceType":"module"}