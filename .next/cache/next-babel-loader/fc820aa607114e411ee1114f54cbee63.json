{"ast":null,"code":"export function apiRequest(path, method = \"GET\", data) {\n  return fetch(`/api/${path}`, {\n    method: method,\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: data ? JSON.stringify(data) : undefined\n  }).then(response => response.json()).then(response => {\n    if (response.status === \"error\") {\n      throw new CustomError(response.code, response.message);\n    } else {\n      return response.data;\n    }\n  });\n} // Create an Error with custom message and code\n\nexport function CustomError(code, message) {\n  const error = new Error(message);\n  error.code = code;\n  return error;\n}\n_c = CustomError;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomError\");","map":{"version":3,"sources":["/Users/luke/Documents/fakewebsite/src/util/util.js"],"names":["apiRequest","path","method","data","fetch","headers","body","JSON","stringify","undefined","then","response","json","status","CustomError","code","message","error","Error"],"mappings":"AAAA,OAAO,SAASA,UAAT,CAAoBC,IAApB,EAA0BC,MAAM,GAAG,KAAnC,EAA0CC,IAA1C,EAAgD;AACrD,SAAOC,KAAK,CAAE,QAAOH,IAAK,EAAd,EAAiB;AAC3BC,IAAAA,MAAM,EAAEA,MADmB;AAE3BG,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFkB;AAK3BC,IAAAA,IAAI,EAAEH,IAAI,GAAGI,IAAI,CAACC,SAAL,CAAeL,IAAf,CAAH,GAA0BM;AALT,GAAjB,CAAL,CAOJC,IAPI,CAOEC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAPf,EAQJF,IARI,CAQEC,QAAD,IAAc;AAClB,QAAIA,QAAQ,CAACE,MAAT,KAAoB,OAAxB,EAAiC;AAC/B,YAAM,IAAIC,WAAJ,CAAgBH,QAAQ,CAACI,IAAzB,EAA+BJ,QAAQ,CAACK,OAAxC,CAAN;AACD,KAFD,MAEO;AACL,aAAOL,QAAQ,CAACR,IAAhB;AACD;AACF,GAdI,CAAP;AAeD,C,CAED;;AACA,OAAO,SAASW,WAAT,CAAqBC,IAArB,EAA2BC,OAA3B,EAAoC;AACzC,QAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAUF,OAAV,CAAd;AACAC,EAAAA,KAAK,CAACF,IAAN,GAAaA,IAAb;AACA,SAAOE,KAAP;AACD;KAJeH,W","sourcesContent":["export function apiRequest(path, method = \"GET\", data) {\n  return fetch(`/api/${path}`, {\n    method: method,\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: data ? JSON.stringify(data) : undefined,\n  })\n    .then((response) => response.json())\n    .then((response) => {\n      if (response.status === \"error\") {\n        throw new CustomError(response.code, response.message);\n      } else {\n        return response.data;\n      }\n    });\n}\n\n// Create an Error with custom message and code\nexport function CustomError(code, message) {\n  const error = new Error(message);\n  error.code = code;\n  return error;\n}\n"]},"metadata":{},"sourceType":"module"}